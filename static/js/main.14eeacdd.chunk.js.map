{"version":3,"sources":["bio/bio.js","skill-select/skill-select.js","App.js","serviceWorker.js","index.js"],"names":["Bio","props","id","current","Skills","useState","setCurrent","ButtonGroup","Button","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVA+BeA,MA5Bf,SAAaC,GACT,OACI,yBAAKC,GAAG,OAEkB,SAAlBD,EAAME,QACN,0CACkB,QAAlBF,EAAME,QACN,yCACkB,OAAlBF,EAAME,QACN,wCACkB,UAAlBF,EAAME,QACN,2CACkB,OAAlBF,EAAME,QACN,wCACkB,YAAlBF,EAAME,QACN,6CACkB,QAAlBF,EAAME,QACN,yCACkB,SAAlBF,EAAME,QACN,0CACkB,QAAlBF,EAAME,QACN,yCACA,iEC4EDC,MA9Ff,WAAkB,MAgBcC,mBAAS,OAhBvB,mBAgBTF,EAhBS,KAgBAG,EAhBA,KAkBd,OACI,yBACIJ,GAAG,aAQH,kBAACK,EAAA,EAAD,KACI,yBAAKL,GAAG,WACJ,kBAACM,EAAA,EAAD,CACIC,UAAuB,SAAZN,EAAqB,SAAW,WAC3CO,QAAS,WAAQJ,EAAW,SAC5BJ,GAAG,QAAO,8BAEd,kBAACM,EAAA,EAAD,CACIC,UAAuB,QAAZN,EAAoB,SAAW,WAC1CO,QAAS,WAAQJ,EAAW,QAC5BJ,GAAG,OAAM,8BAEb,kBAACM,EAAA,EAAD,CACIC,UAAuB,OAAZN,EAAmB,SAAW,WACzCO,QAAS,WAAQJ,EAAW,OAC5BJ,GAAG,MAAK,+BAGhB,6BACA,yBAAKA,GAAG,cACJ,kBAACM,EAAA,EAAD,CACIC,UAAuB,UAAZN,EAAsB,SAAW,WAC5CO,QAAS,WAAQJ,EAAW,UAC5BJ,GAAG,SAAQ,8BAEf,kBAACM,EAAA,EAAD,CACIC,UAAuB,OAAZN,EAAmB,SAAW,WACzCO,QAAS,WAAQJ,EAAW,OAC5BJ,GAAG,UAHP,MAKA,kBAACM,EAAA,EAAD,CACIC,UAAuB,YAAZN,EAAwB,SAAW,WAC9CO,QAAS,WAAQJ,EAAW,YAC5BJ,GAAG,WAAU,+BAGrB,6BACA,yBAAKA,GAAG,cAEJ,kBAACM,EAAA,EAAD,CACIC,UAAuB,QAAZN,EAAoB,SAAW,WAC1CO,QAAS,WAAQJ,EAAW,QAC5BJ,GAAG,OAAM,8BAIb,kBAACM,EAAA,EAAD,CACIC,UAAuB,SAAZN,EAAqB,SAAW,WAC3CO,QAAS,WAAQJ,EAAW,SAC5BJ,GAAG,SAAQ,8BAGf,kBAACM,EAAA,EAAD,CACIC,UAAuB,QAAZN,EAAoB,SAAW,WAC1CO,QAAS,WAAQJ,EAAW,SAFhC,SAQR,kBAAC,EAAD,CAAKH,QAASA,MCnFXQ,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.14eeacdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bio.css'\r\n\r\nfunction Bio(props) {\r\n    return (\r\n        <div id=\"all\">\r\n            {\r\n                props.current === 'html' ?\r\n                <h1>HTML STUFF</h1> :\r\n                props.current === 'css' ?\r\n                <h1>CSS STUFF</h1> :\r\n                props.current === 'js' ?\r\n                <h1>JS STUFF</h1> :\r\n                props.current === 'react' ?\r\n                <h1>REACT STUFF</h1> :\r\n                props.current === 'me' ?\r\n                <h1>ME STUFF</h1> :\r\n                props.current === 'angular' ?\r\n                <h1>ANGULAR STUFF</h1> :\r\n                props.current === 'api' ?\r\n                <h1>API STUFF</h1> :\r\n                props.current === 'blue' ?\r\n                <h1>BLUE STUFF</h1> :\r\n                props.current === 'wip' ?\r\n                <h1>WIP STUFF</h1> :\r\n                <h1>Select a category to learn more</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bio;","import React, { useState } from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nimport './skill-select.css'\r\nimport Bio from '../bio/bio'\r\n\r\n// import border from '../assets/border.png'\r\n\r\nfunction Skills() {\r\n\r\n    // const changeActive = (clicked) => {\r\n    //     let previous = document.getElementsByClassName('active');\r\n    //     if(document.getElementsByClassName('active')) {\r\n    //         console.log(true)\r\n    //     }\r\n    //     previous.className = \"inactive\";\r\n    //     document.getElementById(clicked).className = \"active\";\r\n    // }\r\n\r\n    // <Button className=\"active\" onClick={() => { changeActive('HTML') }} id=\"HTML\"><br /></Button>\r\n    // <Button id=\"CSS\" onClick={() => { changeActive('CSS') }}><br /></Button>\r\n    // <Button id=\"JS\"><br /></Button>\r\n\r\n    // let [active, setActive] = useState(true);\r\n    let [current, setCurrent] = useState('css');\r\n\r\n    return (\r\n        <div\r\n            id=\"css-width\"\r\n        // className={\r\n        //     current === 'css' ? 'cssbg' :\r\n        //     current === 'react' ? 'reactbg' : \r\n        //     current === 'angular' ? 'angularbg' : \r\n        //     current === 'html' ? 'htmlbg' : null\r\n        // }\r\n        >\r\n            <ButtonGroup>\r\n                <div id=\"top-row\">\r\n                    <Button\r\n                        className={current === 'html' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('html'); }}\r\n                        id=\"HTML\"><br />\r\n                    </Button>\r\n                    <Button\r\n                        className={current === 'css' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('css'); }}\r\n                        id=\"CSS\"><br />\r\n                    </Button>\r\n                    <Button\r\n                        className={current === 'js' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('js'); }}\r\n                        id=\"JS\"><br />\r\n                    </Button>\r\n                </div>\r\n                <br />\r\n                <div id=\"middle-row\">\r\n                    <Button\r\n                        className={current === 'react' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('react'); }}\r\n                        id=\"React\"><br />\r\n                    </Button>\r\n                    <Button\r\n                        className={current === 'me' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('me'); }}\r\n                        id=\"jerome\">Me\r\n                    </Button>\r\n                    <Button\r\n                        className={current === 'angular' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('angular'); }}\r\n                        id=\"Angular\"><br />\r\n                    </Button>\r\n                </div>\r\n                <br />\r\n                <div id=\"bottom-row\">\r\n                    {/* <a href=\"https://jeromeapi.firebaseapp.com/\" target=\"blank\"> */}\r\n                    <Button\r\n                        className={current === 'api' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('api'); }}\r\n                        id=\"API\"><br />\r\n                    </Button>\r\n                    {/* </a> */}\r\n                    {/* <a href=\"https://jf-twit-combo.herokuapp.com/\" target=\"blank\"> */}\r\n                    <Button\r\n                        className={current === 'blue' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('blue'); }}\r\n                        id=\"Mashr\"><br />\r\n                    </Button>\r\n                    {/* </a> */}\r\n                    <Button\r\n                        className={current === 'wip' ? \"active\" : \"inactive\"}\r\n                        onClick={() => { setCurrent('wip'); }}>WIP\r\n                    </Button>\r\n                </div>\r\n            </ButtonGroup>\r\n            {/* <img src={border} /> */}\r\n\r\n            <Bio current={current}></Bio>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skills;","import React from 'react';\nimport './App.css';\nimport Skills from './skill-select/skill-select'\n\nfunction App() {\n  return (\n    <div>\n      <Skills></Skills>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}